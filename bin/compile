#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

BUILD_DIR=$1
CACHE_DIR=$2

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

if [ -n "${BUILDPACK_CLEAR_CACHE+1}" ]; then
  echo "-----> Clearing cache dir."
  rm -rf $CACHE_DIR/*
fi

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"   # place custom sources.list here

APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"

rm -rf $APT_CACHE_DIR
if [ ! -d "$APT_CACHE_DIR" ]; then
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources
  TMPSOURCES=$(cat /etc/apt/sources.list)
  echo "$TMPSOURCES" > "$APT_SOURCES"    # no cp here

  APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
  APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES"

  topic "Updating apt caches"
  apt-get $APT_OPTIONS update | indent
  topic "Installing packages"
  # VERSION=`uname -r`
  apt-get $APT_OPTIONS -y -f -d install --reinstall libpython2.7 \
                                                    libelf-dev \
                                                    libdw-dev \
                                                    libunwind-dev \
                                                    binutils-dev \
                                                    systemtap-sdt-dev \
                                                    libslang2-dev \
                                                    libperl-dev \
                                                    libbabeltrace-dev \
                                                    linux-headers-$VERSION \
                                                    flex | indent

  mkdir -p $BUILD_DIR/.apt

  for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB $BUILD_DIR/.apt/
  done
fi

# topic ".apt"
# ls -al "$BUILD_DIR/.apt/usr/lib/linux-tools"
# topic "perf"
# "$BUILD_DIR/.apt/usr/bin/perf" --version

# topic "search 1"
# find / -name "*linux-tools*"
# topic "search 2"
# find / -name "perf"

# topic "/lib"
# ls -al /lib/x86_64-linux-gnu
# topic "/usr/lib"
# ls -al /usr/lib
# cp -R /usr/lib/libpython2.7.so.1.0 "$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu"

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"


topic "Rewrite package-config files"
find $BUILD_DIR/.apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'

LINUX_CACHE_DIR="$CACHE_DIR/linux"
if [ ! -d "$LINUX_CACHE_DIR" ]; then
  topic "Cloning linux-tools repository"
  git clone --depth=1 https://github.com/torvalds/linux.git "$LINUX_CACHE_DIR" | indent
  cd "$LINUX_CACHE_DIR/tools/perf"
  topic "Building perf"
  make | indent
  topic "Installing perf"
  make install | indent
  cp -R ~/bin/* "$BUILD_DIR/.apt/usr/bin/"
  cp -R ~/lib/* "$BUILD_DIR/.apt/usr/lib/"
  cp -R ~/share/* "$BUILD_DIR/.apt/usr/share/"
fi
topic "Checking perf version"
"$BUILD_DIR/.apt/usr/bin/perf" --version | indent
